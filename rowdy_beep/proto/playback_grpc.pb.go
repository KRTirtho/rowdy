// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: proto/playback.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlaybackClient is the client API for Playback service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlaybackClient interface {
	// A simple RPC.
	//
	// Obtains the feature at a given position.
	//
	// A feature with an empty name is returned if there's no feature at the given
	// position.
	GetHello(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Msg, error)
	Play(ctx context.Context, in *Path, opts ...grpc.CallOption) (*Duration, error)
	Pause(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Resume(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Stop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	TogglePlayback(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	GetVolume(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Volume, error)
	SetVolume(ctx context.Context, in *Volume, opts ...grpc.CallOption) (*Empty, error)
	GetSpeed(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Speed, error)
	SetSpeed(ctx context.Context, in *Speed, opts ...grpc.CallOption) (*Empty, error)
}

type playbackClient struct {
	cc grpc.ClientConnInterface
}

func NewPlaybackClient(cc grpc.ClientConnInterface) PlaybackClient {
	return &playbackClient{cc}
}

func (c *playbackClient) GetHello(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Msg, error) {
	out := new(Msg)
	err := c.cc.Invoke(ctx, "/playback.Playback/GetHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playbackClient) Play(ctx context.Context, in *Path, opts ...grpc.CallOption) (*Duration, error) {
	out := new(Duration)
	err := c.cc.Invoke(ctx, "/playback.Playback/Play", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playbackClient) Pause(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/playback.Playback/Pause", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playbackClient) Resume(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/playback.Playback/Resume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playbackClient) Stop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/playback.Playback/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playbackClient) TogglePlayback(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/playback.Playback/TogglePlayback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playbackClient) GetVolume(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Volume, error) {
	out := new(Volume)
	err := c.cc.Invoke(ctx, "/playback.Playback/GetVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playbackClient) SetVolume(ctx context.Context, in *Volume, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/playback.Playback/SetVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playbackClient) GetSpeed(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Speed, error) {
	out := new(Speed)
	err := c.cc.Invoke(ctx, "/playback.Playback/GetSpeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playbackClient) SetSpeed(ctx context.Context, in *Speed, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/playback.Playback/SetSpeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlaybackServer is the server API for Playback service.
// All implementations must embed UnimplementedPlaybackServer
// for forward compatibility
type PlaybackServer interface {
	// A simple RPC.
	//
	// Obtains the feature at a given position.
	//
	// A feature with an empty name is returned if there's no feature at the given
	// position.
	GetHello(context.Context, *Empty) (*Msg, error)
	Play(context.Context, *Path) (*Duration, error)
	Pause(context.Context, *Empty) (*Empty, error)
	Resume(context.Context, *Empty) (*Empty, error)
	Stop(context.Context, *Empty) (*Empty, error)
	TogglePlayback(context.Context, *Empty) (*Empty, error)
	GetVolume(context.Context, *Empty) (*Volume, error)
	SetVolume(context.Context, *Volume) (*Empty, error)
	GetSpeed(context.Context, *Empty) (*Speed, error)
	SetSpeed(context.Context, *Speed) (*Empty, error)
	mustEmbedUnimplementedPlaybackServer()
}

// UnimplementedPlaybackServer must be embedded to have forward compatible implementations.
type UnimplementedPlaybackServer struct {
}

func (UnimplementedPlaybackServer) GetHello(context.Context, *Empty) (*Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHello not implemented")
}
func (UnimplementedPlaybackServer) Play(context.Context, *Path) (*Duration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Play not implemented")
}
func (UnimplementedPlaybackServer) Pause(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pause not implemented")
}
func (UnimplementedPlaybackServer) Resume(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resume not implemented")
}
func (UnimplementedPlaybackServer) Stop(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedPlaybackServer) TogglePlayback(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TogglePlayback not implemented")
}
func (UnimplementedPlaybackServer) GetVolume(context.Context, *Empty) (*Volume, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVolume not implemented")
}
func (UnimplementedPlaybackServer) SetVolume(context.Context, *Volume) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVolume not implemented")
}
func (UnimplementedPlaybackServer) GetSpeed(context.Context, *Empty) (*Speed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpeed not implemented")
}
func (UnimplementedPlaybackServer) SetSpeed(context.Context, *Speed) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSpeed not implemented")
}
func (UnimplementedPlaybackServer) mustEmbedUnimplementedPlaybackServer() {}

// UnsafePlaybackServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlaybackServer will
// result in compilation errors.
type UnsafePlaybackServer interface {
	mustEmbedUnimplementedPlaybackServer()
}

func RegisterPlaybackServer(s grpc.ServiceRegistrar, srv PlaybackServer) {
	s.RegisterService(&Playback_ServiceDesc, srv)
}

func _Playback_GetHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaybackServer).GetHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playback.Playback/GetHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaybackServer).GetHello(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Playback_Play_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Path)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaybackServer).Play(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playback.Playback/Play",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaybackServer).Play(ctx, req.(*Path))
	}
	return interceptor(ctx, in, info, handler)
}

func _Playback_Pause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaybackServer).Pause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playback.Playback/Pause",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaybackServer).Pause(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Playback_Resume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaybackServer).Resume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playback.Playback/Resume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaybackServer).Resume(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Playback_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaybackServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playback.Playback/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaybackServer).Stop(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Playback_TogglePlayback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaybackServer).TogglePlayback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playback.Playback/TogglePlayback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaybackServer).TogglePlayback(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Playback_GetVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaybackServer).GetVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playback.Playback/GetVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaybackServer).GetVolume(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Playback_SetVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Volume)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaybackServer).SetVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playback.Playback/SetVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaybackServer).SetVolume(ctx, req.(*Volume))
	}
	return interceptor(ctx, in, info, handler)
}

func _Playback_GetSpeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaybackServer).GetSpeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playback.Playback/GetSpeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaybackServer).GetSpeed(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Playback_SetSpeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Speed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaybackServer).SetSpeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playback.Playback/SetSpeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaybackServer).SetSpeed(ctx, req.(*Speed))
	}
	return interceptor(ctx, in, info, handler)
}

// Playback_ServiceDesc is the grpc.ServiceDesc for Playback service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Playback_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "playback.Playback",
	HandlerType: (*PlaybackServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHello",
			Handler:    _Playback_GetHello_Handler,
		},
		{
			MethodName: "Play",
			Handler:    _Playback_Play_Handler,
		},
		{
			MethodName: "Pause",
			Handler:    _Playback_Pause_Handler,
		},
		{
			MethodName: "Resume",
			Handler:    _Playback_Resume_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Playback_Stop_Handler,
		},
		{
			MethodName: "TogglePlayback",
			Handler:    _Playback_TogglePlayback_Handler,
		},
		{
			MethodName: "GetVolume",
			Handler:    _Playback_GetVolume_Handler,
		},
		{
			MethodName: "SetVolume",
			Handler:    _Playback_SetVolume_Handler,
		},
		{
			MethodName: "GetSpeed",
			Handler:    _Playback_GetSpeed_Handler,
		},
		{
			MethodName: "SetSpeed",
			Handler:    _Playback_SetSpeed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/playback.proto",
}
